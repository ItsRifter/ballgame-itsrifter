
@BaseClass = BaseProperties_local_ballgame
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// Ballers.BallSpawn
//
@PointClass base(BaseProperties_local_ballgame) editormodel( "models/editor/ball.vmdl", fixedbounds ) 
metadata
{
	entity_tool_name = "Ball Spawnpoint"
	entity_tool_group = "Balls"
	entity_tool_tip = "Spawnpoint for balls"
}
= info_ball_start : ""
[
	index(integer) : "Index" : 0 : "Used for linking checkpoint, set to 0 for initial spawn."
]

//
// Ballers.BumperBrush
//
@SolidClass base(BaseProperties_local_ballgame) tags( Dynamic ) 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= func_bumper : ""
[
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	force(float) : "Force" : "500" : ""
	pitch(float) : "Pitch" : "1" : ""
	enabled(boolean) : "Enabled" : 1 : "Whether this func_brush is visible/active at all"
	solid(boolean) : "Solid" : 1 : "Whether this func_brush has collisions"
	health(float) : "Health" : 0 : "If set to above 0, the entity will have this much health on spawn and will be breakable."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input DisableSolid(void) : "Make this func_brush non solid"
	input EnableSolid(void) : "Make this func_brush solid"
	input ToggleSolid(void) : "Toggle solidity of this func_brush"
	input Enable(void) : "Enable this func_brush, making it visible"
	input Disable(void) : "Disable this func_brush, making it invisible and non solid"
	input Toggle(void) : "Toggle this func_brush"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged, even if it is unbreakable."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// Ballers.CheckpointBrush
//
@SolidClass base(BaseProperties_local_ballgame) tags( Dynamic ) 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= func_checkpoint : ""
[
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	index(integer) : "Index" : 0 : "Used for checkpoint order and for linking spawnpoints. Do not use 0 for this, start with 1."
	enabled(boolean) : "Enabled" : 1 : "Whether this func_brush is visible/active at all"
	solid(boolean) : "Solid" : 1 : "Whether this func_brush has collisions"
	health(float) : "Health" : 0 : "If set to above 0, the entity will have this much health on spawn and will be breakable."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input DisableSolid(void) : "Make this func_brush non solid"
	input EnableSolid(void) : "Make this func_brush solid"
	input ToggleSolid(void) : "Toggle solidity of this func_brush"
	input Enable(void) : "Enable this func_brush, making it visible"
	input Disable(void) : "Disable this func_brush, making it invisible and non solid"
	input Toggle(void) : "Toggle this func_brush"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged, even if it is unbreakable."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// Ballers.FallDamageBrush
//
@SolidClass base(BaseProperties_local_ballgame) tags( Dynamic ) 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= func_falldamage : ""
[
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	enabled(boolean) : "Enabled" : 1 : "Whether this func_brush is visible/active at all"
	solid(boolean) : "Solid" : 1 : "Whether this func_brush has collisions"
	health(float) : "Health" : 0 : "If set to above 0, the entity will have this much health on spawn and will be breakable."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input DisableSolid(void) : "Make this func_brush non solid"
	input EnableSolid(void) : "Make this func_brush solid"
	input ToggleSolid(void) : "Toggle solidity of this func_brush"
	input Enable(void) : "Enable this func_brush, making it visible"
	input Disable(void) : "Disable this func_brush, making it invisible and non solid"
	input Toggle(void) : "Toggle this func_brush"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged, even if it is unbreakable."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// Ballers.HurtBrush
//
@SolidClass base(BaseProperties_local_ballgame) tags( Dynamic ) 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= trigger_death : "Immediately kills all ballers inside"
[
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	enabled(boolean) : "Enabled" : 1 : "Whether this func_brush is visible/active at all"
	solid(boolean) : "Solid" : 1 : "Whether this func_brush has collisions"
	health(float) : "Health" : 0 : "If set to above 0, the entity will have this much health on spawn and will be breakable."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input DisableSolid(void) : "Make this func_brush non solid"
	input EnableSolid(void) : "Make this func_brush solid"
	input ToggleSolid(void) : "Toggle solidity of this func_brush"
	input Enable(void) : "Enable this func_brush, making it visible"
	input Disable(void) : "Disable this func_brush, making it invisible and non solid"
	input Toggle(void) : "Toggle this func_brush"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged, even if it is unbreakable."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// Ballers.MovingBrush
//
@SolidClass base(BaseProperties_local_ballgame) tags( Dynamic ) = func_movelinear : ""
[
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	origin(vector) : "Start Position" :  : ""
	angles(angle) : "Start Angles" :  : ""
	speed(float) : "Speed" : 0 : ""
	movedistance(float) : "Move Distance" : 0 : ""
	movedir(angle) : "Move Angles" :  : ""
	enabled(boolean) : "Enabled" : 1 : "Whether this func_brush is visible/active at all"
	solid(boolean) : "Solid" : 1 : "Whether this func_brush has collisions"
	health(float) : "Health" : 0 : "If set to above 0, the entity will have this much health on spawn and will be breakable."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input DisableSolid(void) : "Make this func_brush non solid"
	input EnableSolid(void) : "Make this func_brush solid"
	input ToggleSolid(void) : "Toggle solidity of this func_brush"
	input Enable(void) : "Enable this func_brush, making it visible"
	input Disable(void) : "Disable this func_brush, making it invisible and non solid"
	input Toggle(void) : "Toggle this func_brush"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged, even if it is unbreakable."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

